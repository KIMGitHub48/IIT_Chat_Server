[gd_scene load_steps=6 format=3 uid="uid://fqhy675kg8v8"]

[sub_resource type="GDScript" id="GDScript_ygrrp"]
resource_name = "_"
script/source = "extends Node


@onready var curent_net_node = $RpcPeer

# ############################Public#################################

func public_start_server():
	return curent_net_node.public_start_server()


func public_stop_server():
	return curent_net_node.public_stop_server()


func public_authorization_passed(passed, access, remote_sender_id):
	curent_net_node.public_authorization_passed(passed, access, remote_sender_id)

# ##############################Client#################################

func get_chat_public_message(login, message):
	curent_net_node.get_chat_public_message(login, message)

# #####################################################################
# #####################################################################
"

[sub_resource type="GDScript" id="GDScript_0kkkt"]
resource_name = "_"
script/source = "extends Node


#signal player_connected(peer_id, player_info)

const SERVER_PORT = 4848
const MAX_CONNECTIONS = 200


@onready var core_node = get_node(Globals.CORE)
@onready var server_rpc_node = $Rpc/Server
@onready var client_rpc_node = $Rpc/Client


func _ready():
	multiplayer.peer_connected.connect(_on_player_connected)
	multiplayer.peer_disconnected.connect(_on_player_disconnected)

# ############################Public##################################

func public_start_server() -> bool:
	var peer = ENetMultiplayerPeer.new()
	var error = peer.create_server(SERVER_PORT, MAX_CONNECTIONS)
	if error:
		return false
	else:
		multiplayer.multiplayer_peer = peer
		return true


func public_stop_server() -> bool:
	multiplayer.multiplayer_peer.close()
	return true

# ##############################Client#################################
func public_authorization_passed(passed, access, remote_sender_id):
	client_rpc_node.authorization_passed.rpc_id(remote_sender_id, passed, access)


func get_chat_public_message(login, message):
	client_rpc_node.get_chat_public_message.rpc(login, message)
# #####################################################################
# #####################################################################

func _on_player_connected(remote_sender_id):
	#Регистрация проходит после авторизации
	print(remote_sender_id)
	print(multiplayer.get_peers())


func _on_player_disconnected(remote_sender_id):
	core_node.operation_node.chat_delete_login(remote_sender_id)
	print(remote_sender_id)
"

[sub_resource type="GDScript" id="GDScript_mirwn"]
resource_name = "server_rpc"
script/source = "extends Node


@onready var core_node = get_node(Globals.CORE)
@onready var client_rpc_node = $\"../Client\"


func _ready():
	print(self.get_path())


@rpc(\"any_peer\",\"call_local\",\"reliable\")
func peer_authorization(login, password):
	var remote_sender_id = multiplayer.get_remote_sender_id()
	core_node.operation_node.public_authorization(login, password, remote_sender_id)


@rpc(\"any_peer\",\"call_remote\",\"reliable\")
func peer_get_database():
	var test_dict:Dictionary = { 1:\"test\" }
	var remote_sender_id = multiplayer.get_remote_sender_id()
	client_rpc_node.send_database.rpc_id(remote_sender_id, test_dict)


@rpc(\"any_peer\",\"call_remote\",\"reliable\")
func send_chat_public_message(message): 
	var remote_sender_id = multiplayer.get_remote_sender_id()
	core_node.operation_node.send_chat_public_message(remote_sender_id, message)
"

[sub_resource type="GDScript" id="GDScript_3xay8"]
resource_name = "client_rpc"
script/source = "extends Node


@rpc(\"authority\",\"call_remote\",\"reliable\")
func authorization_passed(passed, access): pass


@rpc(\"authority\",\"call_local\",\"reliable\")
func get_chat_public_message(login, message): 
	pass

#@rpc(\"authority\",\"call_local\",\"reliable\")
#func send_database(database): pass
"

[sub_resource type="GDScript" id="GDScript_sfu7w"]
resource_name = " "
script/source = "extends Node

# Autoload named Lobby

# These signals can be connected to by a UI lobby scene or the game scene.
signal player_connected(peer_id, player_info)
signal player_disconnected(peer_id)
signal server_disconnected

const PORT = 4848
const DEFAULT_SERVER_IP = \"127.0.0.1\" # IPv4 localhost
const MAX_CONNECTIONS = 20

# This will contain player info for every player,
# with the keys being each player's unique IDs.
var players = {}

# This is the local player info. This should be modified locally
# before the connection is made. It will be passed to every other peer.
# For example, the value of \"name\" can be set to something the player
# entered in a UI scene.
var player_info = {\"name\": \"Name\"}

var players_loaded = 0



func _ready():
	multiplayer.peer_connected.connect(_on_player_connected)
	multiplayer.peer_disconnected.connect(_on_player_disconnected)
	multiplayer.connected_to_server.connect(_on_connected_ok)
	multiplayer.connection_failed.connect(_on_connected_fail)
	multiplayer.server_disconnected.connect(_on_server_disconnected)


func join_game(address = \"\"):
	if address.is_empty():
		address = DEFAULT_SERVER_IP
	var peer = ENetMultiplayerPeer.new()
	var error = peer.create_client(address, PORT)
	if error:
		return error
	multiplayer.multiplayer_peer = peer


func create_game():
	var peer = ENetMultiplayerPeer.new()
	var error = peer.create_server(PORT, MAX_CONNECTIONS)
	if error:
		return error
	multiplayer.multiplayer_peer = peer

	players[1] = player_info
	player_connected.emit(1, player_info)


func remove_multiplayer_peer():
	multiplayer.multiplayer_peer = null


# When the server decides to start the game from a UI scene,
# do Lobby.load_game.rpc(filepath)
@rpc(\"call_local\", \"reliable\")
func load_game(game_scene_path):
	get_tree().change_scene_to_file(game_scene_path)


# Every peer will call this when they have loaded the game scene.
@rpc(\"any_peer\", \"call_local\", \"reliable\")
func player_loaded():
	if multiplayer.is_server():
		players_loaded += 1
		if players_loaded == players.size():
			$/root/Game.start_game()
			players_loaded = 0


# When a peer connects, send them my player info.
# This allows transfer of all desired data for each player, not only the unique ID.
func _on_player_connected(id):
	_register_player.rpc_id(id, player_info)


@rpc(\"any_peer\", \"reliable\")
func _register_player(new_player_info):
	var new_player_id = multiplayer.get_remote_sender_id()
	players[new_player_id] = new_player_info
	player_connected.emit(new_player_id, new_player_info)


func _on_player_disconnected(id):
	players.erase(id)
	player_disconnected.emit(id)


func _on_connected_ok():
	var peer_id = multiplayer.get_unique_id()
	players[peer_id] = player_info
	player_connected.emit(peer_id, player_info)


func _on_connected_fail():
	multiplayer.multiplayer_peer = null


func _on_server_disconnected():
	multiplayer.multiplayer_peer = null
	players.clear()
	server_disconnected.emit()
"

[node name="Net" type="Node"]
script = SubResource("GDScript_ygrrp")

[node name="RpcPeer" type="Node" parent="."]
script = SubResource("GDScript_0kkkt")

[node name="Rpc" type="Node" parent="RpcPeer"]

[node name="Server" type="Node" parent="RpcPeer/Rpc"]
script = SubResource("GDScript_mirwn")

[node name="Client" type="Node" parent="RpcPeer/Rpc"]
script = SubResource("GDScript_3xay8")

[node name="GodotExample" type="Node" parent="RpcPeer"]
script = SubResource("GDScript_sfu7w")
